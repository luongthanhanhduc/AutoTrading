/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataVisualizationJPanel.java
 *
 * Created on Jun 15, 2011, 11:32:36 AM
 */
package presentation.guiForTechnicalFilter;

import business.algorithm.predictAlgorithm.AbstractPredictAlgorithm;
import business.dataVisualization.chart.ChartStyle;
import business.dataVisualization.chart.VisulizationChart;
import business.dataVisualization.dataProcessing.DataVisualizationProcessor;
import dataAccess.databaseManagement.entity.AssetEntity;
import dataAccess.databaseManagement.entity.ExchangeEntity;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import org.jfree.chart.ChartPanel;
import presentation.ComboKeyHandler;
import presentation.ParameterJPanel;
import presentation.mainJFrame;

/**
 *
 * @author Dinh
 */
public class TechnicalFilterJPanel extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** Creates new form DataVisualizationJPanel */
    public TechnicalFilterJPanel() {
        initComponents();
        initOtherComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithmOptionJPanel = new javax.swing.JPanel();
        preAlgJPanel = new javax.swing.JPanel();
        preAlgJComboBox = new javax.swing.JComboBox();
        rankJButton = new javax.swing.JButton();
        preAlgParametersContainerJPanel = new javax.swing.JPanel();
        startPredictionDateJLabel = new javax.swing.JLabel();
        startPredictionDateJSpinner = new javax.swing.JSpinner();
        trainingSamplesJSpinner = new javax.swing.JSpinner();
        trainingSamplesJLabel = new javax.swing.JLabel();
        predictionAlgorithmjLabel = new javax.swing.JLabel();
        updateStatusjLabel = new javax.swing.JLabel();
        methodJLabel = new javax.swing.JLabel();
        methodJComboBox = new javax.swing.JComboBox();
        periodJLabel = new javax.swing.JLabel();
        periodJSpinner = new javax.swing.JSpinner();
        sharpeNoSamjLabel = new javax.swing.JLabel();
        sharpeNoSamJSpinner = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rankingJTable = new javax.swing.JTable();
        visualizationChartJPanel = new javax.swing.JPanel();
        symbolOptionJPanel = new javax.swing.JPanel();
        assetJLabel = new javax.swing.JLabel();
        assetJComboBox = new javax.swing.JComboBox();
        fromDateJLabel = new javax.swing.JLabel();
        fromDateJSpinner = new javax.swing.JSpinner();
        toDateJLabel = new javax.swing.JLabel();
        toDateJSpinner = new javax.swing.JSpinner();
        exchangeJLabel = new javax.swing.JLabel();
        exchangeJComboBox = new javax.swing.JComboBox();
        chartStyleJLabel = new javax.swing.JLabel();
        charStyleJComboBox = new javax.swing.JComboBox();
        refreshJButton = new javax.swing.JButton();
        chartContainerJPanel = new javax.swing.JPanel();

        algorithmOptionJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RANKING", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        preAlgJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Criteria"));

        String[] temp = {business.algorithm.predictAlgorithm.PredictAlgorithmAPI.CHARTCURVEMATCHING};
        preAlgJComboBox.setModel(new javax.swing.DefaultComboBoxModel(temp));
        preAlgJComboBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                preAlgJComboBoxActionPerformed(evt);
            }
        });

        rankJButton.setText("Rank");
        rankJButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankJButtonActionPerformed(evt);
            }
        });

        preAlgParametersContainerJPanel.setLayout(new java.awt.GridLayout(1, 0));

        startPredictionDateJLabel.setText("Date:");

        startPredictionDateJSpinner.setModel(new javax.swing.SpinnerDateModel());
        startPredictionDateJSpinner.setEditor(new JSpinner.DateEditor(startPredictionDateJSpinner, "MM/dd/yyyy"));
        startPredictionDateJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startPredictionDateJSpinnerStateChanged(evt);
            }
        });

        trainingSamplesJSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3000), Integer.valueOf(0), null, Integer.valueOf(5)));
        trainingSamplesJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                trainingSamplesJSpinnerStateChanged(evt);
            }
        });

        trainingSamplesJLabel.setText("Training Data:");

        predictionAlgorithmjLabel.setText("Pre.Alg:");

        methodJLabel.setText("Method:");

        methodJComboBox.setModel(new javax.swing.DefaultComboBoxModel(Ranking.RANKING_METHOD_LIST));
        methodJComboBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodJComboBoxActionPerformed(evt);
            }
        });

        periodJLabel.setText("Sharpe Period:");

        periodJSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(0), null, Integer.valueOf(5)));
        periodJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                periodJSpinnerStateChanged(evt);
            }
        });

        sharpeNoSamjLabel.setText("Sharpe noSam:");

        sharpeNoSamJSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(40), Integer.valueOf(0), null, Integer.valueOf(5)));
        sharpeNoSamJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sharpeNoSamJSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout preAlgJPanelLayout = new javax.swing.GroupLayout(preAlgJPanel);
        preAlgJPanel.setLayout(preAlgJPanelLayout);
        preAlgJPanelLayout.setHorizontalGroup(
            preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preAlgJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preAlgJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateStatusjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rankJButton))
                    .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(preAlgParametersContainerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(preAlgJPanelLayout.createSequentialGroup()
                            .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(periodJLabel)
                                .addComponent(methodJLabel)
                                .addComponent(startPredictionDateJLabel)
                                .addComponent(predictionAlgorithmjLabel)
                                .addComponent(trainingSamplesJLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(trainingSamplesJSpinner)
                                .addComponent(methodJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(periodJSpinner)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preAlgJPanelLayout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(startPredictionDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(preAlgJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(preAlgJPanelLayout.createSequentialGroup()
                        .addComponent(sharpeNoSamjLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sharpeNoSamJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        preAlgJPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {methodJComboBox, periodJSpinner, preAlgJComboBox, sharpeNoSamJSpinner, startPredictionDateJSpinner, trainingSamplesJSpinner});

        preAlgJPanelLayout.setVerticalGroup(
            preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preAlgJPanelLayout.createSequentialGroup()
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPredictionDateJLabel)
                    .addComponent(startPredictionDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(methodJLabel)
                    .addComponent(methodJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodJLabel)
                    .addComponent(periodJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sharpeNoSamjLabel)
                    .addComponent(sharpeNoSamJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preAlgJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(predictionAlgorithmjLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainingSamplesJLabel)
                    .addComponent(trainingSamplesJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preAlgParametersContainerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(preAlgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankJButton)
                    .addComponent(updateStatusjLabel)))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ranking Table"));

        rankingJTable.setModel(new RankingTableModel());
        jScrollPane1.setViewportView(rankingJTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout algorithmOptionJPanelLayout = new javax.swing.GroupLayout(algorithmOptionJPanel);
        algorithmOptionJPanel.setLayout(algorithmOptionJPanelLayout);
        algorithmOptionJPanelLayout.setHorizontalGroup(
            algorithmOptionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmOptionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(algorithmOptionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(preAlgJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        algorithmOptionJPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel1, preAlgJPanel});

        algorithmOptionJPanelLayout.setVerticalGroup(
            algorithmOptionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmOptionJPanelLayout.createSequentialGroup()
                .addComponent(preAlgJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        visualizationChartJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CHART", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        assetJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        assetJLabel.setText("Asset:");

        assetJComboBox.setEditable(true);
        assetJComboBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                assetJComboBoxActionPerformed(evt);
            }
        });

        fromDateJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        fromDateJLabel.setText("From:");

        fromDateJSpinner.setModel(new javax.swing.SpinnerDateModel());
        fromDateJSpinner.setEditor(new JSpinner.DateEditor(fromDateJSpinner, "MM/dd/yyyy"));
        fromDateJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fromDateJSpinnerStateChanged(evt);
            }
        });

        toDateJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        toDateJLabel.setText("To:");

        toDateJSpinner.setModel(new javax.swing.SpinnerDateModel());
        toDateJSpinner.setEditor(new JSpinner.DateEditor(toDateJSpinner, "MM/dd/yyyy"));
        toDateJSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toDateJSpinnerStateChanged(evt);
            }
        });

        exchangeJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        exchangeJLabel.setText("Exchange:");

        exchangeJComboBox.setEditable(true);
        exchangeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                exchangeJComboBoxActionPerformed(evt);
            }
        });

        chartStyleJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chartStyleJLabel.setText("Chart Style:");

        charStyleJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        charStyleJComboBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                charStyleJComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout symbolOptionJPanelLayout = new javax.swing.GroupLayout(symbolOptionJPanel);
        symbolOptionJPanel.setLayout(symbolOptionJPanelLayout);
        symbolOptionJPanelLayout.setHorizontalGroup(
            symbolOptionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symbolOptionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exchangeJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exchangeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(assetJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assetJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fromDateJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toDateJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chartStyleJLabel)
                .addGap(18, 18, 18)
                .addComponent(charStyleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        symbolOptionJPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fromDateJSpinner, toDateJSpinner});

        symbolOptionJPanelLayout.setVerticalGroup(
            symbolOptionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symbolOptionJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(symbolOptionJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exchangeJLabel)
                    .addComponent(exchangeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assetJLabel)
                    .addComponent(assetJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDateJLabel)
                    .addComponent(fromDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateJLabel)
                    .addComponent(toDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chartStyleJLabel)
                    .addComponent(charStyleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        chartContainerJPanel.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout visualizationChartJPanelLayout = new javax.swing.GroupLayout(visualizationChartJPanel);
        visualizationChartJPanel.setLayout(visualizationChartJPanelLayout);
        visualizationChartJPanelLayout.setHorizontalGroup(
            visualizationChartJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationChartJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visualizationChartJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chartContainerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 923, Short.MAX_VALUE)
                    .addComponent(refreshJButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(symbolOptionJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        visualizationChartJPanelLayout.setVerticalGroup(
            visualizationChartJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visualizationChartJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chartContainerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(symbolOptionJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(algorithmOptionJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualizationChartJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visualizationChartJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(algorithmOptionJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exchangeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exchangeJComboBoxActionPerformed
        if (exchangeJComboBox.getSelectedIndex() == -1) {
            return;
        }
        
        assetJComboBox.setModel(new javax.swing.DefaultComboBoxModel(mainJFrame.mappingExchangeID_Assets.get(exchangeJComboBox.getSelectedItem())));
        assetComboKeyHandler.updateListObjects();
        assetJComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_exchangeJComboBoxActionPerformed

    private void assetJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assetJComboBoxActionPerformed
        if (assetJComboBox.getSelectedIndex() == -1) {
            return;
        }

        dataVisualizationProcessor.setAsset((AssetEntity) assetJComboBox.getSelectedItem());
        dataVisualizationProcessor.updateChartData();
    }//GEN-LAST:event_assetJComboBoxActionPerformed

    private void fromDateJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fromDateJSpinnerStateChanged
        if (fromDateJSpinner.getValue() == null || dataVisualizationProcessor == null) {
            return;
        }

        dataVisualizationProcessor.setFromDate((Date) fromDateJSpinner.getValue());
        dataVisualizationProcessor.updateChartData();
    }//GEN-LAST:event_fromDateJSpinnerStateChanged

    private void toDateJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_toDateJSpinnerStateChanged
        if (toDateJSpinner.getValue() == null || dataVisualizationProcessor == null) {
            return;
        }

        dataVisualizationProcessor.setToDate((Date) toDateJSpinner.getValue());
        dataVisualizationProcessor.updateChartData();
    }//GEN-LAST:event_toDateJSpinnerStateChanged

    private void charStyleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charStyleJComboBoxActionPerformed
        dataVisualizationProcessor.changeChartType((ChartStyle) charStyleJComboBox.getSelectedItem());
        jFreeChartPanel.setChart(dataVisualizationProcessor.getChart());
    }//GEN-LAST:event_charStyleJComboBoxActionPerformed

    private void preAlgJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preAlgJComboBoxActionPerformed
        preAlgParametersContainerJPanel.removeAll();
        preAlg = business.algorithm.predictAlgorithm.PredictAlgorithmAPI.getPredictionAlgorithm((String) preAlgJComboBox.getSelectedItem());
        preAlgParameterJPanel = new ParameterJPanel(preAlg.getParametersList(), preAlg.getDefaultValuesList());
        preAlgParametersContainerJPanel.add(preAlgParameterJPanel);
        preAlgParametersContainerJPanel.updateUI();
    }//GEN-LAST:event_preAlgJComboBoxActionPerformed

    private void rankJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankJButtonActionPerformed
        dataVisualizationProcessor.removeAllPreAlg();

        if (!((String)methodJComboBox.getSelectedItem()).equals(Ranking.SHARPE_RATIO)) {
            TreeMap<String, Object> valueMap = new TreeMap<String, Object>();
            preAlg = business.algorithm.predictAlgorithm.PredictAlgorithmAPI.getPredictionAlgorithm((String) preAlgJComboBox.getSelectedItem());

            for (String name : preAlg.getParametersList().keySet()) {
                valueMap.put(name, preAlgParameterJPanel.getValue(name));
            }
            preAlg.setParametersValue(valueMap);

            dataVisualizationProcessor.addPreAlg(preAlg);
        }        
        
        ranking = new Ranking((String)methodJComboBox.getSelectedItem());
        ranking.preAlg = preAlg;
        ranking.exchangeEntity = (ExchangeEntity) exchangeJComboBox.getSelectedItem();
        ranking.startPredictDate = new java.sql.Date(((Date)startPredictionDateJSpinner.getValue()).getTime());
        ranking.noTraining = trainingSamplesNumber;
        ranking.noSam = noSam;
        ranking.period = period;

        rankJButton.setEnabled(false);
        
        new Thread(new Runnable() {

            @Override
            public void run() {                
                updateStatusjLabel.setVisible(true);
                
                Timer timer = new Timer();
                TimerTask task1 = new TimerTask() {

                    @Override
                    public void run() {
                        updateStatusjLabel.setText(ranking.completePercentage + " complete");
                    }
                };

                timer.schedule(task1, 0, 1000);
                
                try {
                    ranking.rank();
                } catch (Exception ex) {
                    Logger.getLogger(TechnicalFilterJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                RankingTableModel rankingTableModel = (RankingTableModel) rankingJTable.getModel();
                rankingTableModel.setData(ranking.output);
                rankingJTable.updateUI();

                task1.cancel();
                rankJButton.setEnabled(true);
                updateStatusjLabel.setVisible(false);
            }
        }).start();
        
    }//GEN-LAST:event_rankJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        dataVisualizationProcessor.updateChartData();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void startPredictionDateJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startPredictionDateJSpinnerStateChanged
        startPredictionDate = (Date) startPredictionDateJSpinner.getValue();
        if (dataVisualizationProcessor == null) {
            return;
        }
        dataVisualizationProcessor.setStartPredictionDate(startPredictionDate);
        dataVisualizationProcessor.updateChartData();
    }//GEN-LAST:event_startPredictionDateJSpinnerStateChanged

    private void trainingSamplesJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_trainingSamplesJSpinnerStateChanged
        trainingSamplesNumber = (Integer) trainingSamplesJSpinner.getValue();
        if (dataVisualizationProcessor == null) {
            return;
        }
        dataVisualizationProcessor.setTrainingSamplesNumber(trainingSamplesNumber);
        dataVisualizationProcessor.updateChartData();
    }//GEN-LAST:event_trainingSamplesJSpinnerStateChanged

    private void periodJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_periodJSpinnerStateChanged
        period = (Integer) periodJSpinner.getValue();
    }//GEN-LAST:event_periodJSpinnerStateChanged

    private void methodJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodJComboBoxActionPerformed
        String methodName = (String) methodJComboBox.getSelectedItem();
        if (methodName.equals(Ranking.PERCENTAGE_INCREASE)) {
            predictionAlgorithmjLabel.setVisible(true);
            preAlgJComboBox.setVisible(true);
            trainingSamplesJLabel.setVisible(true);
            trainingSamplesJSpinner.setVisible(true);
            preAlgParametersContainerJPanel.setVisible(true);
            periodJLabel.setVisible(false);
            periodJSpinner.setVisible(false);
            sharpeNoSamjLabel.setVisible(false);
            sharpeNoSamJSpinner.setVisible(false);
            preAlgParametersContainerJPanel.removeAll();
            preAlg = business.algorithm.predictAlgorithm.PredictAlgorithmAPI.getPredictionAlgorithm((String) preAlgJComboBox.getSelectedItem());
            preAlgParameterJPanel = new ParameterJPanel(preAlg.getParametersList(), preAlg.getDefaultValuesList());
            preAlgParametersContainerJPanel.add(preAlgParameterJPanel);
            preAlgParametersContainerJPanel.updateUI();            
        } else if (methodName.equals(Ranking.SHARPE_RATIO)) {
            predictionAlgorithmjLabel.setVisible(false);
            preAlgJComboBox.setVisible(false);
            trainingSamplesJLabel.setVisible(false);
            trainingSamplesJSpinner.setVisible(false);
            preAlgParametersContainerJPanel.setVisible(false);
            periodJLabel.setVisible(true);
            periodJSpinner.setVisible(true);
            periodJLabel.setText("Sharpe Period");
            sharpeNoSamjLabel.setVisible(true);
            sharpeNoSamJSpinner.setVisible(true);
            sharpeNoSamjLabel.setText("Sharpe noSam");
        } else if (methodName.equals(Ranking.PERINC_OVER_RISK)) {
            predictionAlgorithmjLabel.setVisible(true);
            preAlgJComboBox.setVisible(true);
            trainingSamplesJLabel.setVisible(true);
            trainingSamplesJSpinner.setVisible(true);
            preAlgParametersContainerJPanel.setVisible(true);
            periodJLabel.setVisible(true);
            periodJSpinner.setVisible(true);
            periodJLabel.setText("Risk Period");
            sharpeNoSamjLabel.setVisible(true);
            sharpeNoSamJSpinner.setVisible(true);
            sharpeNoSamjLabel.setText("Risk noSam");
        }

    }//GEN-LAST:event_methodJComboBoxActionPerformed

    private void sharpeNoSamJSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sharpeNoSamJSpinnerStateChanged
        noSam = (Integer)sharpeNoSamJSpinner.getValue();
    }//GEN-LAST:event_sharpeNoSamJSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel algorithmOptionJPanel;
    private javax.swing.JComboBox assetJComboBox;
    private javax.swing.JLabel assetJLabel;
    private javax.swing.JComboBox charStyleJComboBox;
    private javax.swing.JPanel chartContainerJPanel;
    private javax.swing.JLabel chartStyleJLabel;
    private javax.swing.JComboBox exchangeJComboBox;
    private javax.swing.JLabel exchangeJLabel;
    private javax.swing.JLabel fromDateJLabel;
    private javax.swing.JSpinner fromDateJSpinner;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox methodJComboBox;
    private javax.swing.JLabel methodJLabel;
    private javax.swing.JLabel periodJLabel;
    private javax.swing.JSpinner periodJSpinner;
    private javax.swing.JComboBox preAlgJComboBox;
    private javax.swing.JPanel preAlgJPanel;
    private javax.swing.JPanel preAlgParametersContainerJPanel;
    private javax.swing.JLabel predictionAlgorithmjLabel;
    private javax.swing.JButton rankJButton;
    private javax.swing.JTable rankingJTable;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JSpinner sharpeNoSamJSpinner;
    private javax.swing.JLabel sharpeNoSamjLabel;
    private javax.swing.JLabel startPredictionDateJLabel;
    private javax.swing.JSpinner startPredictionDateJSpinner;
    private javax.swing.JPanel symbolOptionJPanel;
    private javax.swing.JLabel toDateJLabel;
    private javax.swing.JSpinner toDateJSpinner;
    private javax.swing.JLabel trainingSamplesJLabel;
    private javax.swing.JSpinner trainingSamplesJSpinner;
    private javax.swing.JLabel updateStatusjLabel;
    private javax.swing.JPanel visualizationChartJPanel;
    // End of variables declaration//GEN-END:variables
    private DataVisualizationProcessor dataVisualizationProcessor;
    private ComboKeyHandler exchangeComboKeyHandler;
    private ComboKeyHandler assetComboKeyHandler;

    private Integer trainingSamplesNumber;
    private Integer period;
    private Integer noSam;
    private Date startPredictionDate;
    private AbstractPredictAlgorithm preAlg;

    private ChartPanel jFreeChartPanel;
    private ParameterJPanel preAlgParameterJPanel;
    private Ranking ranking;

    private void initOtherComponents() {
        Calendar now = Calendar.getInstance();
        toDateJSpinner.setValue(now.getTime());
        startPredictionDateJSpinner.setValue(now.getTime());
        now.add(Calendar.MONTH, -6);
        fromDateJSpinner.setValue(now.getTime());

        charStyleJComboBox.setModel(new DefaultComboBoxModel(VisulizationChart.CHART_STYLES));

        exchangeJComboBox.setModel(new DefaultComboBoxModel(mainJFrame.mappingExchangeID_Assets.keySet().toArray()));
        exchangeComboKeyHandler = new ComboKeyHandler(exchangeJComboBox);
        JTextField fieldExchange = (JTextField) exchangeJComboBox.getEditor().getEditorComponent();
        fieldExchange.addKeyListener(exchangeComboKeyHandler);

        assetJComboBox.setModel(new DefaultComboBoxModel(mainJFrame.mappingExchangeID_Assets.get(exchangeJComboBox.getSelectedItem())));
        assetComboKeyHandler = new ComboKeyHandler(assetJComboBox);
        JTextField fieldSymbol = (JTextField) assetJComboBox.getEditor().getEditorComponent();
        fieldSymbol.addKeyListener(assetComboKeyHandler);

        dataVisualizationProcessor = new DataVisualizationProcessor((AssetEntity) assetJComboBox.getSelectedItem(), (Date) fromDateJSpinner.getValue(), (Date) toDateJSpinner.getValue(), (ChartStyle) charStyleJComboBox.getSelectedItem());
        startPredictionDate = (Date) startPredictionDateJSpinner.getValue();
        dataVisualizationProcessor.setStartPredictionDate(startPredictionDate);

        trainingSamplesNumber = (Integer) trainingSamplesJSpinner.getValue();
        dataVisualizationProcessor.setTrainingSamplesNumber(trainingSamplesNumber);
        
        period = (Integer) periodJSpinner.getValue();
        noSam = (Integer) sharpeNoSamJSpinner.getValue();
                
        jFreeChartPanel = new ChartPanel(dataVisualizationProcessor.getChart());
        chartContainerJPanel.add(jFreeChartPanel);

        preAlg = business.algorithm.predictAlgorithm.PredictAlgorithmAPI.getPredictionAlgorithm((String) preAlgJComboBox.getSelectedItem());

        preAlgParameterJPanel = new ParameterJPanel(preAlg.getParametersList(), preAlg.getDefaultValuesList());
        preAlgParametersContainerJPanel.add(preAlgParameterJPanel);
        
        String methodName = (String) methodJComboBox.getSelectedItem();
        if (methodName.equals(Ranking.PERCENTAGE_INCREASE)) {
            predictionAlgorithmjLabel.setVisible(true);
            preAlgJComboBox.setVisible(true);
            trainingSamplesJLabel.setVisible(true);
            trainingSamplesJSpinner.setVisible(true);
            preAlgParametersContainerJPanel.setVisible(true);
            periodJLabel.setVisible(false);
            periodJSpinner.setVisible(false);
            sharpeNoSamjLabel.setVisible(false);
            sharpeNoSamJSpinner.setVisible(false);
        } else if (methodName.equals(Ranking.SHARPE_RATIO)) {
            predictionAlgorithmjLabel.setVisible(false);
            preAlgJComboBox.setVisible(false);
            trainingSamplesJLabel.setVisible(false);
            trainingSamplesJSpinner.setVisible(false);
            preAlgParametersContainerJPanel.setVisible(false);
            periodJLabel.setVisible(true);
            periodJSpinner.setVisible(true);
            periodJLabel.setText("Sharpe Period");
            sharpeNoSamjLabel.setVisible(true);
            sharpeNoSamJSpinner.setVisible(true);
            sharpeNoSamjLabel.setText("Sharpe noSam");
        } else if (methodName.equals(Ranking.PERINC_OVER_RISK)) {
            predictionAlgorithmjLabel.setVisible(true);
            preAlgJComboBox.setVisible(true);
            trainingSamplesJLabel.setVisible(true);
            trainingSamplesJSpinner.setVisible(true);
            preAlgParametersContainerJPanel.setVisible(true);
            periodJLabel.setVisible(true);
            periodJSpinner.setVisible(true);
            periodJLabel.setText("Risk Period");
            sharpeNoSamjLabel.setVisible(true);
            sharpeNoSamJSpinner.setVisible(true);
            sharpeNoSamjLabel.setText("Risk noSam");
        }

    }

//    public void debug(Object... os) {
//        JOptionPane.showMessageDialog(new JFrame(), Arrays.deepToString(os));
//    }
}
